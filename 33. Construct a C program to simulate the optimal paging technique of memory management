#include <stdio.h>
#include <stdlib.h>

#define PAGE_TABLE_SIZE 4  // Size of the page table
#define REFERENCE_STRING_SIZE 12  // Size of the reference string

// Function to check if a page is already in memory
int isPageInMemory(int page, int memory[], int memorySize) {
    for (int i = 0; i < memorySize; i++) {
        if (memory[i] == page) {
            return 1;  // Page is in memory
        }
    }
    return 0;  // Page is not in memory
}

// Function to find the page to replace using the optimal algorithm
int findPageToReplace(int memory[], int referenceString[], int currentIndex, int memorySize) {
    int farthestIndex = -1;
    int pageToReplace;

    for (int i = 0; i < memorySize; i++) {
        int nextPageIndex = currentIndex;
        while (nextPageIndex < REFERENCE_STRING_SIZE) {
            if (memory[i] == referenceString[nextPageIndex]) {
                if (nextPageIndex > farthestIndex) {
                    farthestIndex = nextPageIndex;
                    pageToReplace = i;
                }
                break;
            }
            nextPageIndex++;
        }
        if (nextPageIndex == REFERENCE_STRING_SIZE) {
            return i;  // Page will not be used in the future
        }
    }
    return pageToReplace;
}

int main() {
    int memory[PAGE_TABLE_SIZE] = { -1, -1, -1, -1 };  // Initialize memory with -1
    int referenceString[REFERENCE_STRING_SIZE] = {1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5};
    int pageFaults = 0;

    for (int i = 0; i < REFERENCE_STRING_SIZE; i++) {
        if (!isPageInMemory(referenceString[i], memory, PAGE_TABLE_SIZE)) {
            int pageToReplace = findPageToReplace(memory, referenceString, i, PAGE_TABLE_SIZE);
            memory[pageToReplace] = referenceString[i];
            pageFaults++;
        }

        printf("Memory: ");
        for (int j = 0; j < PAGE_TABLE_SIZE; j++) {
            printf("%d ", memory[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);

    return 0;
}
